import asyncio
import logging
import aiohttp
import subprocess
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from sqlalchemy import select, insert, update
from sqlalchemy.dialects.postgresql import insert as pg_insert

from app.db.database import async_session_maker
from app.config import settings
from .models import MonitoringStatus, MonitoringLog
from .telegram_notifier import TelegramNotifier

logger = logging.getLogger(__name__)

class SystemMonitor:
    def __init__(self):
        self.telegram = TelegramNotifier()
        self.is_running = False
        
    async def start_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –ë–î
        await self._init_monitoring_status()
        
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        tasks = [
            asyncio.create_task(self._monitor_api_1c()),
            asyncio.create_task(self._monitor_telegram_bot()),
        ]
        
        try:
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await self._log_event("system", "critical_error", str(e), "critical")
        finally:
            self.is_running = False
    
    async def _init_monitoring_status(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –ë–î"""
        components = ['api_1c', 'telegram_bot']
        
        async with async_session_maker() as session:
            for component in components:
                stmt = pg_insert(MonitoringStatus).values(
                    component=component,
                    status='unknown',
                    last_check=datetime.utcnow(),
                    error_count=0,
                    notification_sent=False
                )
                stmt = stmt.on_conflict_do_nothing(index_elements=['component'])
                await session.execute(stmt)
            await session.commit()
    
    async def _monitor_api_1c(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç 1–°"""
        while self.is_running:
            try:
                await self._check_api_1c_activity()
                await asyncio.sleep(settings.API_CHECK_INTERVAL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API 1–°: {e}")
                await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _monitor_telegram_bot(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞"""
        while self.is_running:
            try:
                await self._check_telegram_bot_health()
                await asyncio.sleep(settings.BOT_CHECK_INTERVAL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ Telegram –±–æ—Ç–∞: {e}")
                await asyncio.sleep(30)
    
    async def _check_api_1c_activity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ API 1–° –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        async with async_session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ ostatki_meta
            from app.warehouse_stock.models import OstatkiMeta
            
            result = await session.execute(
                select(OstatkiMeta.last_updated).where(OstatkiMeta.id == 1)
            )
            last_update = result.scalar_one_or_none()
            
            current_status = await self._get_component_status('api_1c')
            now = datetime.utcnow()
            
            if last_update is None:
                # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                await self._update_status('api_1c', 'error', 
                                        'API 1–°: –¥–∞–Ω–Ω—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏')
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞–≤–Ω–æ –ª–∏ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            time_diff = now - last_update
            threshold = timedelta(seconds=settings.API_TIMEOUT_THRESHOLD)
            
            if time_diff > threshold:
                # –ü—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                if current_status['status'] != 'error':
                    message = f"üî¥ –ü—Ä–æ–±–ª–µ–º–∞: –∑–∞–ø—Ä–æ—Å—ã —Å 1–° –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–∂–µ {int(time_diff.total_seconds()/60)} –º–∏–Ω—É—Ç"
                    await self._update_status('api_1c', 'error', message)
                    await self.telegram.send_alert(message)
                    await self._log_event('api_1c', 'status_change', message, 'error')
            else:
                # –í—Å–µ —Ö–æ—Ä–æ—à–æ
                if current_status['status'] == 'error':
                    message = "‚úÖ –û–ö: –ó–∞–ø—Ä–æ—Å—ã —Å 1–° –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Ä–∞–±–æ—Ç–µ"
                    await self._update_status('api_1c', 'ok', message)
                    await self.telegram.send_recovery(message)
                    await self._log_event('api_1c', 'recovery', message, 'info')
                elif current_status['status'] != 'ok':
                    await self._update_status('api_1c', 'ok', 'API 1–° —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ')
    
    async def _check_telegram_bot_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
            api_url = f"http://{settings.API_HOST}:{settings.API_PORT}/docs"
            
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(api_url) as response:
                    if response.status == 200:
                        # API –æ—Ç–≤–µ—á–∞–µ—Ç
                        current_status = await self._get_component_status('telegram_bot')
                        if current_status['status'] == 'error':
                            message = "‚úÖ –û–ö: Telegram –±–æ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Ä–∞–±–æ—Ç–µ"
                            await self._update_status('telegram_bot', 'ok', message)
                            await self.telegram.send_recovery(message)
                            await self._log_event('telegram_bot', 'recovery', message, 'info')
                        elif current_status['status'] != 'ok':
                            await self._update_status('telegram_bot', 'ok', 'Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')
                    else:
                        raise aiohttp.ClientError(f"HTTP {response.status}")
                        
        except Exception as e:
            # –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
            current_status = await self._get_component_status('telegram_bot')
            if current_status['status'] != 'error':
                message = f"üî¥ –ü—Ä–æ–±–ª–µ–º–∞: Telegram –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å..."
                await self._update_status('telegram_bot', 'error', str(e))
                await self.telegram.send_alert(message)
                await self._log_event('telegram_bot', 'status_change', message, 'error')
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
                restart_result = await self._restart_telegram_bot()
                restart_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {restart_result}"
                await self.telegram.send_alert(restart_message)
                await self._log_event('telegram_bot', 'restart_attempt', restart_message, 'warning')
    
    async def _restart_telegram_bot(self) -> str:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ systemctl"""
        try:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã
            result = subprocess.run(
                ['sudo', 'systemctl', 'restart', 'tg-bot.service'],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                await asyncio.sleep(10)
                
                status_result = subprocess.run(
                    ['sudo', 'systemctl', 'is-active', 'tg-bot.service'],
                    capture_output=True,
                    text=True
                )
                
                if status_result.stdout.strip() == 'active':
                    return "‚úÖ –°–ª—É–∂–±–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
                else:
                    return f"‚ö†Ô∏è –°–ª—É–∂–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å: {status_result.stdout.strip()}"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.stderr}"
                
        except subprocess.TimeoutExpired:
            return "‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–ª—É–∂–±—ã"
        except Exception as e:
            return f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}"
    
    async def _get_component_status(self, component: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        async with async_session_maker() as session:
            result = await session.execute(
                select(MonitoringStatus).where(MonitoringStatus.component == component)
            )
            status_obj = result.scalar_one_or_none()
            
            if status_obj:
                return {
                    'status': status_obj.status,
                    'last_check': status_obj.last_check,
                    'last_success': status_obj.last_success,
                    'error_count': status_obj.error_count,
                    'notification_sent': status_obj.notification_sent
                }
            return {'status': 'unknown', 'error_count': 0, 'notification_sent': False}
    
    async def _update_status(self, component: str, status: str, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        async with async_session_maker() as session:
            now = datetime.utcnow()
            
            update_data = {
                'status': status,
                'last_check': now,
                'error_message': message,
                'updated_at': now
            }
            
            if status == 'ok':
                update_data['last_success'] = now
                update_data['error_count'] = 0
                update_data['notification_sent'] = False
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                current = await self._get_component_status(component)
                update_data['error_count'] = current['error_count'] + 1
            
            stmt = update(MonitoringStatus).where(
                MonitoringStatus.component == component
            ).values(**update_data)
            
            await session.execute(stmt)
            await session.commit()
    
    async def _log_event(self, component: str, event_type: str, message: str, severity: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        async with async_session_maker() as session:
            stmt = insert(MonitoringLog).values(
                component=component,
                event_type=event_type,
                message=message,
                severity=severity,
                created_at=datetime.utcnow()
            )
            await session.execute(stmt)
            await session.commit()
        
        # –¢–∞–∫–∂–µ –ø–∏—à–µ–º –≤ –æ–±—ã—á–Ω—ã–π –ª–æ–≥
        log_level = getattr(logging, severity.upper(), logging.INFO)
        logger.log(log_level, f"[{component}] {event_type}: {message}")
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")