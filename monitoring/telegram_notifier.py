import asyncio
import aiohttp
import logging
from datetime import datetime
from typing import Optional

from app.config import settings

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        self.bot_token = settings.MONITOR_BOT_TOKEN
        self.chat_id = settings.MONITOR_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
    async def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = f"{self.base_url}/sendMessage"
        
        payload = {
            "chat_id": self.chat_id,
            "text": message,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status} - {error_text}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram")
            return False
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_alert(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ (–æ—à–∏–±–∫–∏)"""
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        formatted_message = f"""
üö® <b>–ê–õ–ï–†–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}

#–∞–ª–µ—Ä—Ç #–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #–æ—Å—Ç–∞—Ç–∫–∏_–±–æ—Ç
        """.strip()
        
        return await self.send_message(formatted_message)
    
    async def send_recovery(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        formatted_message = f"""
‚úÖ <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}

#–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ #–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #–æ—Å—Ç–∞—Ç–∫–∏_–±–æ—Ç
        """.strip()
        
        return await self.send_message(formatted_message)
    
    async def send_info(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        formatted_message = f"""
‚ÑπÔ∏è <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}

#–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è #–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #–æ—Å—Ç–∞—Ç–∫–∏_–±–æ—Ç
        """.strip()
        
        return await self.send_message(formatted_message)
    
    async def send_startup_notification(self) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        message = """
üü¢ <b>–ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b>

–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.

<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>
‚Ä¢ API –∑–∞–ø—Ä–æ—Å—ã –æ—Ç 1–°
‚Ä¢ –†–∞–±–æ—Ç–∞ Telegram –±–æ—Ç–∞

#–∑–∞–ø—É—Å–∫ #–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #–æ—Å—Ç–∞—Ç–∫–∏_–±–æ—Ç
        """.strip()
        
        return await self.send_message(message)
    
    async def send_shutdown_notification(self) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        message = """
üî¥ <b>–û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê</b>

–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.

#–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ #–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #–æ—Å—Ç–∞—Ç–∫–∏_–±–æ—Ç
        """.strip()
        
        return await self.send_message(message)
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API"""
        try:
            url = f"{self.base_url}/getMe"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                    if response.status == 200:
                        data = await response.json()
                        bot_info = data.get('result', {})
                        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram OK. –ë–æ—Ç: {bot_info.get('username', 'Unknown')}")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram: {e}")
            return False