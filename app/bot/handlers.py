import os
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from app.services.search import find_products_by_query, log_user_query, get_user_query_history
from app.db.database import async_session_maker

from app.warehouse_stock.models import WarehouseStocks

import pandas as pd

from openpyxl import load_workbook
from openpyxl.styles import PatternFill

from app.services.search import fuzzy_find_products
from app.services.search import find_products_by_text as find_products_by_query 

from collections import defaultdict

from app.bot.utils import format_stock_quantity


router = Router()

def register_handlers(dp):
    dp.include_router(router)


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text.lower() == "/start")
async def handle_start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton(text="–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç XLSX"), KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")]
        ],
        resize_keyboard=True
    )
    await message.answer(
    "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤!</b>\n\n"
    "üîç –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b> –∏–ª–∏ <b>–∞—Ä—Ç–∏–∫—É–ª</b> ‚Äî –∏ —è –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º.\n\n"
    "üìñ –ù–∞–∂–º–∏—Ç–µ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –∏—Å–∫–∞—Ç—å –ø–æ —Å–∫–ª–∞–¥–∞–º, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞.\n\n"
    "üìä –ö–Ω–æ–ø–∫–∞ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç XLSX</b> ‚Äî —Å–∫–∞—á–∞–π—Ç–µ —Å–≤–æ–¥–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.\n\n"
    "üìå –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ <b>–ò—Å—Ç–æ—Ä–∏—è</b> ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.",
    reply_markup=keyboard
)



@router.message(F.text.lower() == "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_instruction(message: Message):
    text = (
        "<b>üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "üîç –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b> –∏–ª–∏ <b>–∞—Ä—Ç–∏–∫—É–ª</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<i>CM-107</i> –∏–ª–∏ <i>–û–ú-350</i>\n\n"
        "üèôÔ∏è –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å <b>–ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–∫–ª–∞–¥—É</b>. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–µ—Ä–µ–¥ —Ç–æ–≤–∞—Ä–æ–º:\n"
        "<code>–ú–æ—Å–∫–≤–∞ CM-107</code>\n"
        "<code>–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ –û–ú-350</code>\n\n"
        "üìñ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç <b>–∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤</b>. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ò—Å—Ç–æ—Ä–∏—è</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n"
        "<b>üè¨ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤:</b>\n"
        "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –í–æ–ª–∂—Å–∫, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ú–æ—Å–∫–≤–∞ (–¶–§–û),\n"
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –û–º—Å–∫, –ü–µ—Ä–º—å, –ü—è—Ç–∏–≥–æ—Ä—Å–∫,\n"
        "–†–æ—Å—Ç–æ–≤-–Ω–∞ –î–æ–Ω—É, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –°—Ç–∞–≤—Ä–æ–ø–æ–ª—å,\n"
        "–¢—é–º–µ–Ω—å, –£—Ñ–∞, –•–∞–±–∞—Ä–æ–≤—Å–∫, –ß–µ–ª—è–±–∏–Ω—Å–∫, –Ø—Ä–æ—Å–ª–∞–≤–ª—å\n\n"
        "‚úÖ –í–≤–æ–¥ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–º–∏/–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ ‚Äî —ç—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "‚õîÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>CM107</code> ‚â† <code>CM-107</code>\n"
    )
    await message.answer(text)


@router.message(F.text.lower() == "–ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç xlsx")
async def handle_full_report(message: Message):
    async with async_session_maker() as session:
        result = await session.execute(WarehouseStocks.__table__.select())
        rows = result.fetchall()

        if not rows:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return

        records = []
        all_cities = set()

        for row in rows:
            all_cities.add(row.sklad)

        all_cities = sorted(all_cities)

        grouped = {}
        for row in rows:
            key = (row.vid, row.name, row.price, row.brend, row.kod, row.articul)
            if key not in grouped:
                grouped[key] = {city: "" for city in all_cities}
            grouped[key][row.sklad] = format_stock_quantity(row.ostatok)

        data = []
        for key, city_stocks in grouped.items():
            row_data = {
                "–í–∏–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã": key[0],
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": key[1],
                "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)": key[2],
                "–ë—Ä–µ–Ω–¥": key[3],
                "–ö–æ–¥": key[4],
                "–ê—Ä—Ç–∏–∫—É–ª": key[5],
            }
            row_data.update(city_stocks)
            data.append(row_data)

        df = pd.DataFrame(data)
        datetime_now = datetime.now().strftime("%d-%m-%Y_%H-%M-%S")
        file_path = f"report_{datetime_now}.xlsx"
        df.to_excel(file_path, index=False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π —á–µ—Ä–µ–∑ openpyxl
        wb = load_workbook(file_path)
        ws = wb.active
        fill = PatternFill(start_color="FFFACD", end_color="FFFACD", fill_type="solid")

        for col in ws.iter_cols(min_row=1, max_row=1):
            header = col[0].value
            col_letter = col[0].column_letter
            if header in ["–í–∏–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ë—Ä–µ–Ω–¥"]:
                ws.column_dimensions[col_letter].width = 30
            elif header in ["–ö–æ–¥", "–ê—Ä—Ç–∏–∫—É–ª"]:
                ws.column_dimensions[col_letter].width = 20
            elif header.startswith("–†–æ–∑–Ω–∏—á–Ω–∞—è"):
                ws.column_dimensions[col_letter].width = 18
            else:
                ws.column_dimensions[col_letter].width = 15
                col[0].fill = fill

        wb.save(file_path)
        await message.answer_document(FSInputFile(file_path), caption="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥–∞–º")
        
        if os.path.exists(file_path):
            os.remove(file_path)


@router.message(F.text.lower() == "–∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def handle_history_request(message: Message):
    user_id = message.from_user.id
    history = await get_user_query_history(user_id)
    if not history:
        await message.answer("\U0001F4DD –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=q, callback_data=f"history:{q}")]
            for q in history[:5]
        ]
    )
    await message.answer("\U0001F4D1 <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:</b>", reply_markup=keyboard)


@router.callback_query(F.data.startswith("history:"))
async def handle_history_callback(callback: CallbackQuery):
    query = callback.data.replace("history:", "")
    user_id = callback.from_user.id
    await log_user_query(user_id, query)

    await callback.answer("\u23F3 –ü–æ–∏—Å–∫...", show_alert=False)

    items = await find_products_by_query(query)
    if not items:
        await callback.message.answer("\U0001F6D1 –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    all_dates = [s['updated_at'] for p in items.values() for s in p['stocks'] if s.get('updated_at')]
    latest_date = max(all_dates).strftime("%d.%m.%Y %H:%M:%S") if all_dates else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


    for kod, product in items.items():
        text = (
            f"üì¶ <b>{product['name']}</b>\n"
            f"‚ñ´Ô∏è –í–∏–¥: {product['vid']}\n"
            f"‚ñ´Ô∏è –ë—Ä–µ–Ω–¥: {product['brend']}\n"
            f"‚ñ´Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {product['articul']}\n"
            f"‚ñ´Ô∏è –ö–æ–¥: {product['kod']}\n"
            f"‚ñ´Ô∏è –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n\n"
            f"<b>üöö –ù–∞–ª–∏—á–∏–µ –ø–æ —Å–∫–ª–∞–¥–∞–º:</b>\n"
        )
        for stock in product['stocks']:
            text += f"   ‚ñ´Ô∏è {stock['sklad']}: {format_stock_quantity(stock['ostatok'])}\n"


        text += f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: <i>{latest_date}</i> –ø–æ –ú–°–ö"
        await callback.message.answer(text)


@router.message(F.text)
async def handle_user_query(message: Message):
    query = message.text.strip()
    user_id = message.from_user.id

 # –æ–±—ã—á–Ω—ã–π
    await log_user_query(user_id, query)
    items = await find_products_by_query(query)

    if items:
        all_dates = [s['updated_at'] for p in items.values() for s in p['stocks'] if s.get('updated_at')]
        latest_date = max(all_dates).strftime("%d.%m.%Y %H:%M:%S") if all_dates else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        for kod, product in items.items():
            sklad_lines = "\n".join(
                [f"   ‚îî {s['sklad']}: <b>{format_stock_quantity(s['ostatok'])}</b>" for s in product["stocks"]]
            )

            text = (
                f"üì¶ <b>{product['name']} | {product['kod']}</b>\n"
                f"üè∑Ô∏è <b>–ë—Ä–µ–Ω–¥:</b> {product['brend']}\n"
                f"üìå <b>–í–∏–¥:</b> {product['vid']}\n"
                f"üîñ <b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product['articul'] or '-'}\n"
                f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']} ‚ÇΩ\n\n"
                f"üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º:</b>\n{sklad_lines}\n\n"
                f"üìÖ <i>–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {latest_date}</i> –ø–æ –ú–°–ö"
            )
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî –≤—ã–≥—Ä—É–∂–∞–µ–º –≤ TXT
        if len(items) > 20:
            file_name = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{query.replace(' ', '_')}.txt"
            lines = []

            for kod, product in items.items():
                text = (
                    f"{product['name']}\n"
                    f"  –í–∏–¥: {product['vid']}\n"
                    f"  –ë—Ä–µ–Ω–¥: {product['brend']}\n"
                    f"  –ê—Ä—Ç–∏–∫—É–ª: {product['articul']}\n"
                    f"  –ö–æ–¥: {product['kod']}\n"
                    f"  –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
                    f"  –ù–∞–ª–∏—á–∏–µ:\n"
                )
                for stock in product['stocks']:
                    text += f"    - {stock['sklad']}: {format_stock_quantity(stock['ostatok'])}\n"
                text += "\n"
                lines.append(text)

            with open(file_name, "w", encoding="utf-8") as f:
                f.write("".join(lines))

            await message.answer_document(FSInputFile(file_name), caption=f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            if os.path.exists(file_name):
                os.remove(file_name)
            return
        else:
            all_dates = [s['updated_at'] for p in items.values() for s in p['stocks'] if s.get('updated_at')]
            latest_date = max(all_dates).strftime("%d.%m.%Y %H:%M:%S") if all_dates else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


            for kod, product in items.items():
                text = (
                    f"üì¶ <b>{product['name']}</b>\n"
                    f"‚ñ´Ô∏è –í–∏–¥: {product['vid']}\n"
                    f"‚ñ´Ô∏è –ë—Ä–µ–Ω–¥: {product['brend']}\n"
                    f"‚ñ´Ô∏è –ê—Ä—Ç–∏–∫—É–ª: {product['articul']}\n"
                    f"‚ñ´Ô∏è –ö–æ–¥: {product['kod']}\n"
                    f"‚ñ´Ô∏è –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n\n"
                    f"<b>üöö –ù–∞–ª–∏—á–∏–µ –ø–æ —Å–∫–ª–∞–¥–∞–º:</b>\n"
                )
                for stock in product['stocks']:
                    text += f"    - {stock['sklad']}: {format_stock_quantity(stock['ostatok'])}\n"

                text += f"\nüìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: <i>{latest_date}</i> –ø–æ –ú–°–ö"
                await message.answer(text)
            return

    # fuzzy fallback
    fuzzy_results = await fuzzy_find_products(query)
    filtered = [r for r in fuzzy_results if r["score"] > 70]

    if not filtered:
        await message.answer("üîç –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    text = f"üîç –¢–æ–≤–∞—Ä <code>{query}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ:\n\n"
    for result in filtered[:5]:
        score = int(result["score"])
        block = (
            f"üì¶ <b>{result['name']}</b>\n"
            f"‚ñ´Ô∏è –ö–æ–¥: {result['kod']}\n"
            f"‚ñ´Ô∏è –ë—Ä–µ–Ω–¥: {result['brend']} | –í–∏–¥: {result['vid']}\n"
            f"‚ñ´Ô∏è –¶–µ–Ω–∞: {result['price']} ‚ÇΩ | –ù–∞–ª–∏—á–∏–µ: {format_stock_quantity(result['ostatok'])} | –°–∫–ª–∞–¥: {result['sklad']}\n"
            f"üìà –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {score}%\n\n"
        )
        text += block

    await message.answer(text)

    


